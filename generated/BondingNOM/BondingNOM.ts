// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transaction extends ethereum.Event {
  get params(): Transaction__Params {
    return new Transaction__Params(this);
  }
}

export class Transaction__Params {
  _event: Transaction;

  constructor(event: Transaction) {
    this._event = event;
  }

  get _by(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amountNOM(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amountETH(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get supply(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get buyOrSell(): string {
    return this._event.parameters[5].value.toString();
  }

  get slippage(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class BondingNOM extends ethereum.SmartContract {
  static bind(address: Address): BondingNOM {
    return new BondingNOM("BondingNOM", address);
  }

  NOMSupToETH(supplyTop: BigInt, supplyBot: BigInt): BigInt {
    let result = super.call(
      "NOMSupToETH",
      "NOMSupToETH(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(supplyTop),
        ethereum.Value.fromUnsignedBigInt(supplyBot)
      ]
    );

    return result[0].toBigInt();
  }

  try_NOMSupToETH(
    supplyTop: BigInt,
    supplyBot: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "NOMSupToETH",
      "NOMSupToETH(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(supplyTop),
        ethereum.Value.fromUnsignedBigInt(supplyBot)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  NOMTokenContract(): Address {
    let result = super.call(
      "NOMTokenContract",
      "NOMTokenContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_NOMTokenContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "NOMTokenContract",
      "NOMTokenContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  a(): BigInt {
    let result = super.call("a", "a():(uint256)", []);

    return result[0].toBigInt();
  }

  try_a(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("a", "a():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  buyQuoteETH(amountETH: BigInt): BigInt {
    let result = super.call("buyQuoteETH", "buyQuoteETH(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amountETH)
    ]);

    return result[0].toBigInt();
  }

  try_buyQuoteETH(amountETH: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "buyQuoteETH",
      "buyQuoteETH(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amountETH)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  buyQuoteNOM(amountNOM: BigInt): BigInt {
    let result = super.call("buyQuoteNOM", "buyQuoteNOM(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amountNOM)
    ]);

    return result[0].toBigInt();
  }

  try_buyQuoteNOM(amountNOM: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "buyQuoteNOM",
      "buyQuoteNOM(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amountNOM)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cubrtu(x: BigInt): BigInt {
    let result = super.call("cubrtu", "cubrtu(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(x)
    ]);

    return result[0].toBigInt();
  }

  try_cubrtu(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("cubrtu", "cubrtu(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(x)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  f64ToTok(fixed64: BigInt): BigInt {
    let result = super.call("f64ToTok", "f64ToTok(int128):(uint256)", [
      ethereum.Value.fromSignedBigInt(fixed64)
    ]);

    return result[0].toBigInt();
  }

  try_f64ToTok(fixed64: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("f64ToTok", "f64ToTok(int128):(uint256)", [
      ethereum.Value.fromSignedBigInt(fixed64)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBondPrice(): BigInt {
    let result = super.call("getBondPrice", "getBondPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getBondPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getBondPrice", "getBondPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNOMAddr(): Address {
    let result = super.call("getNOMAddr", "getNOMAddr():(address)", []);

    return result[0].toAddress();
  }

  try_getNOMAddr(): ethereum.CallResult<Address> {
    let result = super.tryCall("getNOMAddr", "getNOMAddr():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getSupplyNOM(): BigInt {
    let result = super.call("getSupplyNOM", "getSupplyNOM():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getSupplyNOM(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getSupplyNOM", "getSupplyNOM():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  priceAtSupply(_supplyNOM: BigInt): BigInt {
    let result = super.call(
      "priceAtSupply",
      "priceAtSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_supplyNOM)]
    );

    return result[0].toBigInt();
  }

  try_priceAtSupply(_supplyNOM: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "priceAtSupply",
      "priceAtSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_supplyNOM)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  priceBondCurve(): BigInt {
    let result = super.call("priceBondCurve", "priceBondCurve():(uint256)", []);

    return result[0].toBigInt();
  }

  try_priceBondCurve(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "priceBondCurve",
      "priceBondCurve():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sellQuoteNOM(amountNOM: BigInt): BigInt {
    let result = super.call("sellQuoteNOM", "sellQuoteNOM(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amountNOM)
    ]);

    return result[0].toBigInt();
  }

  try_sellQuoteNOM(amountNOM: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sellQuoteNOM",
      "sellQuoteNOM(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amountNOM)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supplyAtPrice(price: BigInt): BigInt {
    let result = super.call(
      "supplyAtPrice",
      "supplyAtPrice(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(price)]
    );

    return result[0].toBigInt();
  }

  try_supplyAtPrice(price: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "supplyAtPrice",
      "supplyAtPrice(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(price)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supplyNOM(): BigInt {
    let result = super.call("supplyNOM", "supplyNOM():(uint256)", []);

    return result[0].toBigInt();
  }

  try_supplyNOM(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("supplyNOM", "supplyNOM():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  teamBalance(): BigInt {
    let result = super.call("teamBalance", "teamBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_teamBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("teamBalance", "teamBalance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokToF64(token: BigInt): BigInt {
    let result = super.call("tokToF64", "tokToF64(uint256):(int128)", [
      ethereum.Value.fromUnsignedBigInt(token)
    ]);

    return result[0].toBigInt();
  }

  try_tokToF64(token: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokToF64", "tokToF64(uint256):(int128)", [
      ethereum.Value.fromUnsignedBigInt(token)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdraw(): boolean {
    let result = super.call("withdraw", "withdraw():(bool)", []);

    return result[0].toBoolean();
  }

  try_withdraw(): ethereum.CallResult<boolean> {
    let result = super.tryCall("withdraw", "withdraw():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get NOMContAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BuyNOMCall extends ethereum.Call {
  get inputs(): BuyNOMCall__Inputs {
    return new BuyNOMCall__Inputs(this);
  }

  get outputs(): BuyNOMCall__Outputs {
    return new BuyNOMCall__Outputs(this);
  }
}

export class BuyNOMCall__Inputs {
  _call: BuyNOMCall;

  constructor(call: BuyNOMCall) {
    this._call = call;
  }

  get estAmountNOM(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get allowSlip(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyNOMCall__Outputs {
  _call: BuyNOMCall;

  constructor(call: BuyNOMCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SellNOMCall extends ethereum.Call {
  get inputs(): SellNOMCall__Inputs {
    return new SellNOMCall__Inputs(this);
  }

  get outputs(): SellNOMCall__Outputs {
    return new SellNOMCall__Outputs(this);
  }
}

export class SellNOMCall__Inputs {
  _call: SellNOMCall;

  constructor(call: SellNOMCall) {
    this._call = call;
  }

  get amountNOM(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get estAmountETH(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get allowSlip(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SellNOMCall__Outputs {
  _call: SellNOMCall;

  constructor(call: SellNOMCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
